name: Build
# not technically necessary because release also runs tests but this way the build badge is separate

env:
  USE_LOCKFILE: ${{ secrets.USE_LOCKFILE }}

on:
  push:
    branches: [ master, build ]
  repository_dispatch:
    types: [ build ]

jobs:
  build:
    if: "! contains(toJSON(github.event.commits.*.message), '[skip ci]')"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["latest"]

    steps:

    # region Setup
    - uses: actions/checkout@v3

    - name: Setting Up Node.js (${{ matrix.node-version }})
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - uses: pnpm/action-setup@v2.0.1
      name: Install pnpm
      id: pnpm-install
      with:
        version: latest

    - name: Get Pnpm Cache Path
      id: pnpm-cache
      run: |
        echo "::set-output name=dir::$(pnpm store path)"

    - uses: actions/cache@v3
      name: pnpm cache
      with:
        path: ${{ steps.pnpm-cache.outputs.dir }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - run: "echo Cache Key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}"
    - run: "echo Cache Restore-Keys: ${{ runner.os }}-pnpm-store-"
    - run: "echo Pnpm Cache Hit: ${{ steps.pnpm-cache.outputs.cache-hit }}"

    - uses: actions-rs/toolchain@v1
      name: Install Rust Toolchain
      with:
          toolchain: stable
          default: true

    - uses: actions-rs/toolchain@v1
      name: Install Rust Toolchain
      with:
          toolchain: nightly
          default: false
          components: rustfmt

    - uses: Swatinem/rust-cache@v2

    # regionend

    # region Steps
    - run: pnpm install --frozen-lockfile
      if: "env.USE_LOCKFILE == 'true'"

    - run: pnpm install --no-lockfile
      if: "env.USE_LOCKFILE != 'true'"

    - run: pnpm lint:rustfmt

    - run: pnpm build
    # regionend
